I"Ñ#<blockquote>
  <p><small>Priority Queues is a data type to find the largest M items in a
stream of N items (Constrict: Not enough memory to store N items). </small></p>
</blockquote>

<h4 id="why-algorithms-">Why Algorithms ?</h4>
<ul>
  <li>Programs = Data structures + Algorithms</li>
  <li>Avi Wigderson gives that ‚ÄúAlgorithms has becoming a common language for understanding, nature, human, and computer‚Äù .  Algorithms as computational models are replacing math models in scientific inquiry . People are developing computational models to stimulate what might be happening in nature in order to try to better understand it. Algorithms play an extremely important role in this process .</li>
</ul>

<h4 id="introduction">Introduction</h4>
<p>‚ÄúPriority Queues is a data type to find the largest M items in a
stream of N items (Constrict: Not enough memory to store N items). ‚Äú</p>

<h4 id="priority-queue-implementation-based-on-the-binary-heap">priority-queue implementation based on the binary heap</h4>
<p>Using priority queues is similar to using queues and stacks
but implementing them efficiently is more challenging.  We consider a
classic priority-queue implementation based on the <strong>binary heap</strong>
data structure, where items are kept in an array, subject to certain
ordering constraints that allow for <strong>efficient (log-time)
implementations</strong> of remove the maximum and insert.</p>

<p>We use array representation of a heap-ordered complete binary tree.
Because array implementation <strong>does not waste any space on the usual
pointers</strong> you have in a tree to traverse between parents and
children. The reason is that we‚Äôre able to <strong>keep this binary tree as
balanced as possible</strong>, we don‚Äôt need pointers to figure out the parents
and children. we can just read that off directly from the position in
the array.</p>

<h4 id="binary-heap">binary heap</h4>
<p>The binary heap is that <strong>parent‚Äôs key no smaller than children‚Äôs key</strong>, that‚Äôs (k is the index),</p>
<blockquote>
  <p>set a[k] to a[k/2] when we move up the tree**</p>

  <p>set a[k] to a[2*k] or a[2*k+1] when move down the tree**</p>
</blockquote>

<p>We can take advantage of the capability to move up and down paths in
the tree without pointers and have guaranteed <strong>logarithmic performance</strong>
because the height of a complete binary tree of size N is lgN.</p>

<p>The basic algorithm swim (bottom-up reheapify) moves up the heap until we reach a node with a larger key, or the root; The function swim(int k)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//the parent of the node at position k in a heap is at position k/2</span>
<span class="kd">private</span> <span class="kt">void</span> <span class="nf">swim</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
    <span class="k">while</span><span class="o">(</span><span class="n">k</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">less</span><span class="o">(</span><span class="n">k</span><span class="o">/</span><span class="mi">2</span><span class="o">,</span> <span class="n">k</span><span class="o">)){</span>  <span class="c1">//the node's key larger than parent's key</span>
        <span class="n">exch</span><span class="o">(</span><span class="n">k</span><span class="o">/</span><span class="mi">2</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>              <span class="c1">//exchange the node with its parent</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>The sink algorithm movs down the heap until we reach a node with both children smaller(or equal,) or the bottom; The function sink(int k)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//the children of the node at position k in a heap are at positions 2k and 2k+1</span>
<span class="kd">private</span> <span class="kt">void</span> <span class="nf">sink</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">){</span>
    <span class="k">while</span><span class="o">(</span><span class="mi">2</span><span class="o">*</span><span class="n">k</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="o">*</span><span class="n">k</span><span class="o">;</span>                    <span class="c1">//the children of the node</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="no">N</span> <span class="o">&amp;&amp;</span> <span class="n">less</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">))</span> <span class="n">j</span><span class="o">++;</span> <span class="c1">//find the smaller children</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">less</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">j</span><span class="o">))</span> <span class="k">break</span><span class="o">;</span>
        <span class="n">exch</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>                     <span class="c1">//swap the node with the smaller children</span>
        <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>The insert algorithm requires no more than 1 + lgN compares, which involving <strong>moving along a path between the root and the bottom of the heap</strong> whose number of links is no more than lgN; the function insert(key x)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">(</span><span class="nc">Key</span> <span class="n">x</span><span class="o">){</span>
    <span class="n">pq</span><span class="o">[++</span><span class="no">N</span><span class="o">]</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
    <span class="n">swim</span><span class="o">(</span><span class="no">N</span><span class="o">);</span>     <span class="c1">//swim up through the heap</span>

<span class="o">}</span>
</code></pre></div></div>

<p>The heap algorithms require no more than 2lgN compares for remove the maximum; The operation involves moving the heap path no more than lgN, and it requires two compares for each node on the path (except at the bottom): one to find the child with larger key, the other to decide whether that child needs to be promoted; The function delMax()</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Key</span> <span class="nf">delMax</span><span class="o">(){</span>
    <span class="nc">Key</span> <span class="n">max</span> <span class="o">=</span> <span class="n">pq</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span> <span class="c1">//the largest key off the top</span>
    <span class="n">exch</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="no">N</span><span class="o">--);</span>    <span class="c1">//exchange the last one with root</span>
    <span class="n">sink</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>         <span class="c1">//sink sown through the heap</span>
    <span class="n">pq</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>  <span class="c1">//to avoid loitering and help with garbage collection</span>

    <span class="k">return</span> <span class="n">max</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="performance-analysis">Performance Analysis:</h4>
<p>For typical applications that <strong>require a large number of intermixed insert and remove the maximum/min operations</strong> in a large priority queue, the elementary implementations using an ordered array or an unordered array require linear time for one of the operations, a heap-based implementation provides a guarantee that both operations complete in <strong>logarithmic time</strong>.</p>

:ET