I"	<blockquote>
  <p><small> A share about Android NDK - build c/c++ code into shared lib app uses </small></p>
</blockquote>

<h4 id="android-ndk----build-cc-code-into-shared-lib-app-uses">Android NDK  - build c/c++ code into shared lib app uses</h4>

<ul>
  <li>
    <p>Android.mk - glue the c/c++ code to the Android NDK</p>

    <ul>
      <li>defines properties specific to individual modules, or libs</li>
    </ul>
  </li>
  <li>
    <p>Application.mk  - defines properties for all the modules that app uses</p>
  </li>
  <li>
    <p>ndk-build -</p>
  </li>
  <li>
    <p>toolchain</p>
  </li>
  <li>
    <p>the dev tool is so important (eclipse is so terrible for this task)</p>
  </li>
</ul>

<h4 id="about-the-linking-to-update">about the linking [TO UPDATE]</h4>
<ul>
  <li>Linking - concatenates blocks together, and decides on run-time locations for the concatenated blocks
    <ul>
      <li>
        <p>symbol resolution step - symbol table in .symtab associate each global symbol (functions and global variables) reference with a unique symbol definition</p>
      </li>
      <li>
        <p>relocation - associate a memory location with each symbol definition, and then make them point to the memory location meger all sections of the same type into a new aggregate section relocate symbol references so that they point to the correct run-time addresses</p>
      </li>
    </ul>
  </li>
  <li>linking with static libraries
    <ul>
      <li>related functions can be compiled into separate object modules and then packaged in a single static library file; At link time, the linker will copy only the object modules(symbol resolution) that are referenced by the program.</li>
    </ul>
  </li>
  <li>
    <p>advantages
need to maintain and update the static libraries periodically<br />
At run time, the code of the functions like I/O functions is duplicated in the text segment of each running process</p>
  </li>
  <li>dynamic linking with shared libraries</li>
  <li>
    <p>a single copy of the .text section of a shared libray in memory can be shared by different running</p>
  </li>
  <li>the basic idea is to link the relocation and symbol table info when the executable file is created, and then complete the linking process (code and data ) dynamically when the program is loaded</li>
</ul>

:ET