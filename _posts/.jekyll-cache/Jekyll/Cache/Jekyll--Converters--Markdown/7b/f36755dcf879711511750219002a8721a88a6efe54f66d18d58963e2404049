I"K<h4 id="notes-on-commu">Notes on commu</h4>
<ul>
  <li></li>
  <li>team skills</li>
</ul>

<h4 id="notes-on-soft-skills">Notes on soft-skills</h4>
<ul>
  <li><strong>tell the hard from the impossible</strong>
    <ul>
      <li><strong>Find a solution</strong> which is merely hard when it can be confidently <strong>scheduled</strong> and <strong>the risks</strong> are understood</li>
      <li>make the requirement more <strong>clear</strong></li>
      <li>a clear definition of success -&gt; often become merely hard</li>
      <li></li>
    </ul>
  </li>
  <li>fight schedule pressure -&gt; <strong>time-to-market pressure</strong> &lt;- reflect a financial reality
    <ul>
      <li><strong>visible between the available labor and the product</strong></li>
      <li></li>
      <li>maintain a concise and up-to-date <strong>project plan</strong>
        <ul>
          <li>mark progress</li>
          <li>help make decisions</li>
        </ul>
      </li>
      <li></li>
      <li>how to estimate time
        <ul>
          <li>restate your <strong>assumptions</strong></li>
          <li>consider <strong>prototyping the task</strong> firstly</li>
          <li>prepare <strong>a written estimate</strong> by <strong>decomposing</strong> the task into progressively smaller subtasks (less than a day)</li>
          <li><strong>make this visible</strong> to the manager</li>
          <li>try to have the people to estimate, and have <strong>team-wide consensus on estimate</strong></li>
          <li></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Understand the user
    <ul>
      <li>figure out <strong>what people really want</strong></li>
      <li>spend more time with users, <strong>understand them</strong>
        <ul>
          <li><strong>propose</strong> it to user</li>
          <li><strong>test your ideas</strong> against them as much as you can</li>
          <li></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Gather support for a project
    <ul>
      <li>a prototype</li>
      <li>demo real value</li>
    </ul>
  </li>
</ul>

<h4 id="notes-on-technology">notes on technology</h4>

<h4 id="notes-on-engineering">notes on engineering</h4>
<ul>
  <li><strong>Problem Solving</strong>
    <ul>
      <li>Before you go rushing out to learn to code, figure out what your problem actually is.
        <ul>
          <li>Do you even have a problem?</li>
          <li>Can you explain it to others in a way they can understand?</li>
          <li>Have you researched the problem, and its <strong>possible solutions, deeply</strong>?</li>
          <li>Does coding solve that problem? Are you sure?</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>System thinking
    <ul>
      <li>Think about systems and how they <strong>interoperate</strong>. Systems Thinking is more important than coding.</li>
      <li>Know what artifacts your system makes and what’s needed for it to run. Know what kinds of things its good at and what it’s bad at - in a non-zealous and non-egotistical way.</li>
      <li>Understanding the basic building blocks are important.</li>
      <li></li>
    </ul>
  </li>
  <li>mini-project
    <ul>
      <li>
        <p>别做大项目。 从小项目开始，而且永远不要期望它变大。如果这么想（指做大型软件），就会做过度设计，把它想象得过于重要。更坏的情况是，你可能会被自己想象中的艰难工作所吓倒。</p>
      </li>
      <li>
        <p>所以要<strong>从小处起步，着力考虑细节</strong>。 别去想大图景和好设计。如果项目<strong>没解决某些需求</strong>，多半就是被过度设计了</p>
      </li>
    </ul>
  </li>
  <li>Think about Abstractions
    <ul>
      <li>learn how to think and when to dig deeper</li>
      <li>learn how to question how things work</li>
      <li>learn that everything new and simple <strong>hides something large and complex</strong> -&gt; we are all standing on the shoulders of giants</li>
    </ul>
  </li>
  <li>总是想用不同的算法解决同一个数据问题，然后比较不同算法的效能
    <ul>
      <li>不同应用场景对于算法的新奇度要求不一样</li>
      <li>在工业界，比起算法新奇度，<strong>解决方案的 scalability 更重要</strong>：能不能用到几个T的数据上，能不能当天内出结果，需要每天更新所有信息还是仅仅当天数据</li>
    </ul>
  </li>
</ul>

<h4 id="notes-on-producation">notes on producation</h4>

<h4 id="reference">reference</h4>
<ul>
  <li><a href="https://github.com/braydie/HowToBeAProgrammer">HowToBeAProgrammer</a></li>
  <li>[极客时间-许式伟的架构课]</li>
  <li>[极客时间-python]</li>
  <li>[星球-陈老师每日精华]</li>
  <li><a href="https://time.geekbang.org/column/158">软件工程之美</a></li>
  <li>[梁宁产品思维30讲]</li>
  <li><a href="https://www.hanselman.com/blog/SystemsThinkingAsImportantAsEverForNewCoders.aspx">Systems Thinking as important as ever for new coders</a></li>
  <li><a href="https://www.hanselman.com/blog/PleaseLearnToThinkAboutAbstractions.aspx">Please Learn to Think about Abstractions</a></li>
</ul>
:ET