<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="cache-control" content="no-cache">
        <meta http-equiv="pragma" content="no-cache">
        <link href="/css/style.css" media="screen" rel="stylesheet" type="text/css"></link>
        <link href="/css/mobile.css" media="handheld, only screen and (max-device-width: 960px)" rel="stylesheet" type="text/css"></link>
        <link href="/css/pygments.css" media="screen" rel="stylesheet" type="text/css"></link>
        <link href="/css/fonts.css" rel="stylesheet">
        <link href="http://feeds.feedburner.com/github/FETh"
        type="application/atom+xml" rel="alternate" title="情书.feed" />

        <meta name="twitter:card" content="summary">
<meta name="twitter:site" content="@_muyun">
<meta name="twitter:creator" content="@_muyun">

  <meta name="twitter:title" content="情书">


  <meta name="twitter:url" content="/atom.xml">



<meta name="twitter:description" content="">



        <title> </title>
    </head>
    
    <body>
        
        <div class="menu">
            <h1> 情书</h1>
            <em> by muyun_</em>
            
            <ul class="nobullet pagelinks">
                <li class="menulinks"><a href="/">writing</a></li>
                <li class="menulinks"><a href="/shorts.html">bits</a></li>
                
                <li class="menulinks"><a href="/delicious.html">delicious</a></li>
                
                <li class="menulinks"><a href="/blogroll.html">links</a></li>
                <li class="menulinks"><a href="/about.html">about</a></li>
            </ul>
            
            <hr class="hidemobile">
            
            <ul class="nobullet linkicons">
              <li><a href="http://feeds.feedburner.com/github/FETh"><i class="icon-rss"> </i></a></li>
              <li><a href="https://github.com/muyun"><i class="icon-github-sign"> </i></a></li>
              <li><a href="https://twitter.com/_muyun"><i class="icon-twitter"> </i></a></li>
              <li><a href="http://www.weibo.com/cloudadmirer/profile?rightmod=1&wvr=6&mod=personnumber"><i class="icon-weibo"> </i></a></li>
            </ul>
        </div>
        
        <div id="wrapper">
            <div id="content">
                <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title></title>
	<subtitle></subtitle>
	<link href="" rel="self" />
	<link href="/" />
	<id></id>
	<updated>2014-12-08T01:17:34+08:00</updated>
	<author>
		<name>muyun_</name>
		<email>wenlzhao@gmail.com</email>
	</author>

    
	<entry>
		<title>寻路中国</title>
        <link href="/2014/12/05/country-driving.html" />
        <id>/2014/12/05/country-driving.html</id>
		<updated>2014-12-05T22:42:00+08:00</updated>
		<content type="html">&lt;p&gt;TODO&lt;/p&gt;
</content>
	</entry>
    
	<entry>
		<title>总结这几个月</title>
        <link href="/thinking/summary/2014/07/13/summary-about-these-months.html" />
        <id>/thinking/summary/2014/07/13/summary-about-these-months.html</id>
		<updated>2014-07-13T14:53:00+08:00</updated>
		<content type="html">&lt;ul&gt;
&lt;li&gt;一些欢乐时光 - &lt;strong&gt;总是一些有意义或者让自己很有成长的一些事情&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;跟着几个朋友去了兰桂坊半通宵了一次，喝酒跳舞，回来时候淋了一身大雨；几个台湾的和两个德国女孩的那种开放和自由让人印象深刻&lt;/li&gt;
&lt;li&gt;去hiking了一次，大概6个小时，天气潮热，准备不足 - 带水不足, 但是还是挺欢乐的, 尤其是和一个马来亚的华裔（读社会科学的本科）聊了下南洋的事情，可惜没留下联系方式&lt;/li&gt;
&lt;li&gt;打了一次网球，稍微重温了下当年的学习，还是应该多多练习下；太开心 了，好长时间没有这么运动过了&lt;/li&gt;
&lt;li&gt;看了几个电影和电视剧；《Gravity》和《权利的游戏》第三季还不错，不过第三季没有了前两季的那种感觉了&lt;/li&gt;
&lt;li&gt;看了几个记录片;《mankind:the story of all of us》 太经典了，确实，科技和商业才是人类发展的原动力 –再看下英文版&lt;/li&gt;
&lt;li&gt;每天吃饭，大伙都积极，互助 &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;需要改进的地方

&lt;ul&gt;
&lt;li&gt;每天练习英语&lt;/li&gt;
&lt;li&gt;中午听下英语, 看看英语文章&lt;/li&gt;
&lt;li&gt;生活热情&lt;/li&gt;
&lt;li&gt;烦的时候 - 总是和一些志同道合的人一起的活动&lt;/li&gt;
&lt;li&gt;和人去运动 - 和人聊聊 - 去做一些事情 -&lt;/li&gt;
&lt;li&gt;找一个从没去过的街道&lt;/li&gt;
&lt;li&gt;去一个心存好奇的地方,感受自己的范围以外的人生样貌&lt;/li&gt;
&lt;li&gt;学习一项新的技艺,比如吉它&lt;/li&gt;
&lt;li&gt;做点困难的事情 - 不要和自己的职业类似比如去孤儿院做义工,去一 个复杂的机械厂从学徒做起&lt;/li&gt;
&lt;li&gt;多读些文学书,心理书&lt;/li&gt;
&lt;li&gt;多总结下&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;需要提升的经验

&lt;ul&gt;
&lt;li&gt;关于工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有的说法都很具体并且来自于切身的经历&lt;/strong&gt;;&lt;strong&gt;尊重那些踏实的人,多做事,把小事做好&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;每一个人,都是我的老师;养成一种&lt;strong&gt;随时随地随人随事学习&lt;/strong&gt;的习惯:用心观察生活,在旅行中考察风土人情,&lt;strong&gt;思考为什么并且找寻答案&lt;/strong&gt;,询问各种职业的人关于他们的工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Don&amp;#39;t do lousy jobs&lt;/strong&gt;. 随着年龄的增长，我们犯错误的成本越来越高；&lt;strong&gt;如果是因为怠慢而犯错以至丧失机会，那代价就太大了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;真正适合我的环境和圈子，应该是能够让我&lt;strong&gt;展现真实的自我&lt;/strong&gt;的地方&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;don&amp;#39;t judge too soon&lt;/strong&gt; .  先入为主很容易误判； 对人对事，在收集到足够证据之前，&lt;strong&gt;不好轻易下定论&lt;/strong&gt;，言辞上留有余地，心理上抱有一定程度的观望，爱恨不在一瞬间，真伪良莠需要时间来证明&lt;/li&gt;
&lt;li&gt;人才都要经得起折腾，&lt;strong&gt;负责到底的人创造性解决难题的人&lt;/strong&gt;是最有机会成为职场黑马的&lt;/li&gt;
&lt;li&gt;职场人如果所做的工作没有吃力感，较轻松，是一个比较危险的状态，意味着随时你的工作会被更低工资的人替代；&lt;strong&gt;给自己一点压力，你才会进步&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有能力还全心全意还团结协作的人就是黑马了；&lt;strong&gt;三心二意的投入和全心全意的投入其实费的时间一样，但工作结果完全不一样&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一部分员工做事会反思有悟性并且会想出一些小办法提高效率，还有极少员工会&lt;strong&gt;归纳会思考&lt;/strong&gt;，会将&lt;strong&gt;工作流程进行极大的改进&lt;/strong&gt;并&lt;strong&gt;找到一件事情的关键点&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;关于生活的观念&lt;/li&gt;
&lt;li&gt;庆祝每一个微小的胜利和喜悦&lt;/li&gt;
&lt;li&gt;懂得捍卫自己,但不要把自己的行为当成理所应当;如果认为另一方是在利用你,那么要懂得维护自己的利益(如果不确定是被利用还是遭遇不 公平,&lt;strong&gt;问问亲朋好友或所在行业中比较合适的人&lt;/strong&gt;);另一方面,在没有理由的时候也要保持清醒,不要把自己的行为当成理所应当 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;只要不属于一切都理所应当的那一方,坦诚面对自己的需求&lt;/strong&gt;;&lt;strong&gt;只管要求想要的东西&lt;/strong&gt;,而不是在那里纠结要不要,怎么样或什么才是合理的;&lt;strong&gt;合理的要求不会损害双方的关系&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要害怕表达你自己,习惯被拒绝&lt;/strong&gt;; 平和面对一次又一次的拒绝&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;钱可以给你自由,理财&lt;/strong&gt;,&lt;strong&gt;尽早投资&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尽可能一次只做一件事&lt;/strong&gt;,吃饭,谈话...&lt;/li&gt;
&lt;li&gt;定期接触大自然;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;总是尽最大努力&lt;/strong&gt;,这样，你永远都不会后悔或者想要了解“如果……将会怎样”&lt;/li&gt;
&lt;li&gt;为了达到目标,&lt;strong&gt;现在应该做些什么呢&lt;/strong&gt;?&lt;strong&gt;从今天开始就要把它融入自己的生活&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;当面对某些决定时, &lt;strong&gt;选择做从现在起的一年中不会后悔的事情&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何运用你的心态完全由你掌控&lt;/strong&gt;;你的行为可以出于爱,善良,大方,关切,你的生活越充满爱,善良,大方和关切&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生活是为了创造价值&lt;/strong&gt;;我们的文化教育我们成为&amp;quot;消费者&amp;quot;而不是贡献者,应该认识到&lt;strong&gt;人生的意义在于创造价值&lt;/strong&gt;,做出这样的选择需要勇气,计划和坚定;如果认识到这一点,人生将充满积极的动力,并学会充满善意地对待周围的人&lt;/li&gt;
&lt;li&gt;听话不是缺点,也不是优点,&lt;strong&gt;只是一个状态&lt;/strong&gt;, 在很多场合也非常听话; &lt;strong&gt;总是依赖别人的话调整自己的行为才是问题&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在人际关系中&lt;strong&gt;努力寻找结合点,契合点&lt;/strong&gt;,而不是只盯着矛盾分岐; 永远不与任何人包括对你最不友好的人纠缠,那是浪费时间;&lt;/li&gt;
&lt;li&gt;不要太多关注自己不能控制的部分,&lt;strong&gt;做好自己能控制的部分&lt;/strong&gt;; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要打听一个人的过去,衡量人的标准是他今天的行为&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;他们健美, 幽默, &lt;strong&gt;亲和&lt;/strong&gt;, 健谈, &lt;strong&gt;乐观&lt;/strong&gt;, 阳光&lt;/li&gt;
&lt;li&gt;为了建立有效的人际关系,和你在一起时,让其他人&lt;strong&gt;感觉舒服&lt;/strong&gt;很重要&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;自律

&lt;ul&gt;
&lt;li&gt;将&lt;strong&gt;自控负反馈环完全放在自身而无求于他人监控&lt;/strong&gt;,从而效率奇高&lt;/li&gt;
&lt;li&gt;极具职业精神&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业内技能输出型人物,必定无怨无悔地付出,做事极其认真,能感到其强烈信念&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;目标

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;思维清晰严谨, 有条理, 思辨能力强&lt;/strong&gt;; 一下能抓住问题要害,且有思考后的 执行力&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;心态积极,对人对事总看到光明的一面&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;愿意帮助人,愿意给人有益的建议&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;做事有效率,时间观念强, 管理时间和对事情的优先处理能力超强&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;受信用,制定目标,总能实现&lt;/li&gt;
&lt;li&gt;如果他认为是对的,&lt;strong&gt;总能影响人,说服人,既便是面对比他权力大的人&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;学习

&lt;ul&gt;
&lt;li&gt;从不浪费时间,喜欢读书并送书给朋友们&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;抓住事物的本质&lt;/strong&gt;的能力超强,&lt;strong&gt;审时度势&lt;/strong&gt;能力超强&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;待人友好&lt;/strong&gt;,无论你多大多小&lt;/li&gt;
&lt;li&gt;只要有可能总是&lt;strong&gt;尽最大力量帮助身边的人和朋友&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;对人评价&lt;strong&gt;正面积极&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;理性自律,自强自尊&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;ul&gt;
&lt;li&gt;Reference:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://site.douban.com/107747/widget/notes/175122/note/215979107/&quot;&gt;李东:我在纽约学到了什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.forbeschina.com/review/201409/0037188.shtml&quot;&gt;获得成功和幸福的20条基本生活经验&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
    
	<entry>
		<title>思考的技术</title>
        <link href="/summary/reading/thinking/2014/06/29/summary-from-thinking.html" />
        <id>/summary/reading/thinking/2014/06/29/summary-from-thinking.html</id>
		<updated>2014-06-29T16:23:00+08:00</updated>
		<content type="html">&lt;p&gt;摘录自&lt;a href=&quot;http://book.douban.com/subject/3138847/&quot;&gt;思考的技术&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不要把假设和结论混为一谈; &lt;strong&gt;搜集证据,印证假设到导出真正结论过程中的逻辑思考&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;认清现象和原因的不同; &lt;strong&gt;很多都不是原因,而是现象(结果)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在许多个案中,真正的原因只有其中一个,而其他只是这个原因导致的现象;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;如果发现自己的假设是错的,重新做假设,再次出发就行了&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一直悔恨自己的人生,与固执于错误的假设是一样没有意义的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在提出假设的阶段,真正的成败挑战才登场&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;解决问题的能力,就是为印证假设不辞辛苦的行动力&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;给出的建议中,只要有一个就足够了&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;逻辑思考的基础在于累积事实,如果呈现的是事实,就一定要虚心接受&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当自己的意见和对方不同时,以秉持事实为证的信念&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线性思考行不通; 科学的方法是&lt;strong&gt;问为什么,理由&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;真的是这样吗? 才是工作的开始,要听的是论点&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一个问题有数百个变量,且随时间而变化,所以答案不唯一; 要准确做出判断
几乎不可能 ,但是&lt;strong&gt;以科学的方法思考,则可做整体的控制&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;现在已进入像叶子不知会掉落何处的复杂体系中,几乎所有问题都没有答案;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;培养孩子养成动脑思考的习惯,让孩子对无解的问题设法提出假设,并不厌
其烦努力证明自己的假设是否正确&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;世界上许多问题本来就没有答案; 那些&lt;strong&gt;忠于自己,能够找出属于自己的答案的人,其生命力比起已经习惯别人给出答案的人,一定更为强韧&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;就算没有答案,也会自己提出假设,反复求证,直到找出答案&lt;/strong&gt;; 不管碰到任何
困难,都勇于接受挑战,坚持到底,才是教育的根本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;思考方式,重视的是如何才能导出结论&lt;/strong&gt;,而不是有没有知识&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;以假设前提进行回答,有前提就有结论的思考模式&lt;/strong&gt;; 对问题的前提先做个明
确的假设,若前提错误,可以改变前提再回答&lt;/li&gt;
&lt;li&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不太需要思考的事,尽量减少思考,且&lt;strong&gt;绝不没事自寻烦恼,生活要非常简单,把能规律化的事情规律化&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;训练自己常保持好奇心,和别人接触的机会增长见识&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;做一些可以让自己生存下去的投资,&lt;strong&gt;请问你成长了多少&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最伤脑筋的是&lt;strong&gt;做什么事都半途而废的人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;碰到自己没有遇到过的问题时,尝试解决&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;常常提出质疑,然后找出问题的解决方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
    
	<entry>
		<title>Building Abstractions with Procedures</title>
        <link href="/programming/2014/05/29/building-abstractions-with-procedures.html" />
        <id>/programming/2014/05/29/building-abstractions-with-procedures.html</id>
		<updated>2014-05-29T23:16:00+08:00</updated>
		<content type="html">&lt;p&gt;TODO&lt;/p&gt;
</content>
	</entry>
    
	<entry>
		<title>Search Algorithms: Binary Search Trees</title>
        <link href="/algorithms/2014/05/25/search-algorithms-binary-search-trees.html" />
        <id>/algorithms/2014/05/25/search-algorithms-binary-search-trees.html</id>
		<updated>2014-05-25T22:20:00+08:00</updated>
		<content type="html">&lt;p&gt;Binary search trees (BST) combines the flexibility of insertion in a
linked list (using two links per node leads to an efficient
implementation) with the efficiency of search in an ordered array.&lt;/p&gt;

&lt;p&gt;BST is a binary tree in symmetric order. A binary tree either either
or two disjoint binary trees.  Symmetric order means that each node&amp;#39;s
key is larger than all keys in its left subtree, and smaller than all
keys in its right subtree.&lt;/p&gt;

&lt;p&gt;A Node is comprised of four fields: a key and a value; a reference to
the left (smaller keys) and right subtree (larger keys).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// the left link points to a BST for items with smaller keys&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// the right link points to a BST for items with larger keys&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The Implementation:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The search use the recursive algorithm to search for a key, the function get()&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//starting with the root of the tree&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The insert put key-value pair into BST, if key already exists, update
with new value, the function put()&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//x.left is null, after new Node, put this ref to the new node into x.left&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Performance Analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The running times depend on the shapes of the trees, which depends on the &lt;strong&gt;order in which the
keys come in (insert)&lt;/strong&gt;.  (If the key is inserted in natural order, this is no difference from
linked list).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Binary search trees correspond exactly to Quicksort partitioning&lt;/strong&gt;. In
the binary search trees, we have a root, and everybody smaller to the
left, and everybody larger to the right. In the Quicksort
partitioning, after the random shuffling, we have the partitioning
element and then we process everybody to the left independently of
everybody to the right, so, if N &lt;strong&gt;distinct keys&lt;/strong&gt; are inserted into a BST
&lt;strong&gt;in random order&lt;/strong&gt;, the expected number of compares for a
search/insert is &lt;strong&gt;~2lnN(about 1.39lgN) on the average&lt;/strong&gt; . But there&amp;#39;s problem that the actual worst
case height if the keys come in in order and reverse order and other
natural orders (the worst tree shape), that the time could be proportional to ~N .&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References: 

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://algs4.cs.princeton.edu/32bst/&quot;&gt;Binary Search Trees&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
    
	<entry>
		<title>Search Algorithms: Binary Search</title>
        <link href="/algorithms/2014/05/11/search-algorithms-binary-search.html" />
        <id>/algorithms/2014/05/11/search-algorithms-binary-search.html</id>
		<updated>2014-05-11T22:30:00+08:00</updated>
		<content type="html">&lt;p&gt;A symbol table is a data structure for &lt;strong&gt;key-value pairs&lt;/strong&gt; that supports
two operations: insert (put) a new pair into the table and search for
(get) the value associated with a given key .&lt;/p&gt;

&lt;p&gt;Binary search in an ordered array can implement the symbol table
API. The underlying data structure is two parallel array, &lt;strong&gt;with the
keys kept in order&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Implementation:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For get(), the rank() (returns the number of keys) tells us precisely where the key is to be found;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//return the value associated with the given key, or null&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//return the number of keys in the table&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//return the number of keys in the table that are smaller than given key&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and for put(), the rank tells where to update the value .&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//search for key, update value if found, grow table if new&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//where to update the value&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// key is already in table&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// insert new key-value pair&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Performance Analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The reason that we &lt;strong&gt;keep keys in an ordered array&lt;/strong&gt; is so that we can use
&lt;strong&gt;array indexing to dramatically reduce the number of compares required
for each search using the known as binary search&lt;/strong&gt; ( &lt;strong&gt;can auto calculate
the related mid value based on array index&lt;/strong&gt;).  Binary search in an
ordered array with N keys uses no more than &lt;strong&gt;lgN + 1&lt;/strong&gt; compares for a
search; and Inserting a new key into an ordered array uses &lt;strong&gt;~2N array
accesses&lt;/strong&gt; in the worst case (&lt;strong&gt;e.g. move the array entirely, line 14~16&lt;/strong&gt;), so inserting N keys into an initially
empty table uses &lt;strong&gt;~N^2 array accesses&lt;/strong&gt; in the worst case; See the table,&lt;/p&gt;

&lt;p&gt;| algorithm | worst-case search | worst-case insert|
 |---------------|:-------:|--------:|
 | sequential search|  N      |     N    | 
 | binary search    |  lgN    |     2N   | &lt;/p&gt;

&lt;p&gt;In summary, For a &lt;strong&gt;static table&lt;/strong&gt; (with no insert operations allowed), it
is &lt;strong&gt;worthwhile to initialize and sort the table&lt;/strong&gt;; Still, binary
search is infeasible for use in many other applications. For example,
it fails because &lt;strong&gt;searches and inserts are intermixed and the table
size is too large&lt;/strong&gt; . As typical modern search clients require symbole
tables that can support fast implementations of both search and
insert. The means we have to devise algorithms and data structures
that achieve logarithmic performance for both search and insert. To
&lt;strong&gt;support efficient insertion&lt;/strong&gt;, it seems that we need a &lt;strong&gt;linked
structure&lt;/strong&gt;. But a singly linked list forecloses the use of binary
search, because &lt;strong&gt;the efficiency of binary search depends on the ability
to get to the middle of any subarray quickly via indexing&lt;/strong&gt;. To
combine the efficiency of binary search with the flexibility of linked
structures, we need more complicated data structure. That are &lt;strong&gt;binary
search trees and hash tables&lt;/strong&gt; .&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;References:&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://algs4.cs.princeton.edu/31elementary/&quot;&gt;Elementary Symbol Tables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
    
	<entry>
		<title>Sort Algorithms: Priority Queues</title>
        <link href="/algorithms/2014/04/19/sort-algorithms-priority-queues.html" />
        <id>/algorithms/2014/04/19/sort-algorithms-priority-queues.html</id>
		<updated>2014-04-19T19:19:00+08:00</updated>
		<content type="html">&lt;p&gt;&lt;strong&gt;Priority Queues&lt;/strong&gt; is a data type to find the largest M items in a
stream of N items (Constrict: Not enough memory to store N
items). Using priority queues is similar to using queues and stacks
but implementing them efficiently is more challenging.  We consider a
classic priority-queue implementation based on the &lt;strong&gt;binary heap&lt;/strong&gt;
data structure, where items are kept in an array, subject to certain
ordering constraints that allow for &lt;strong&gt;efficient (log-time)
implementations&lt;/strong&gt; of remove the maximum and insert.&lt;/p&gt;

&lt;p&gt;We use array representation of a heap-ordered complete binary tree.
Because array implementation &lt;strong&gt;does not waste any space on the usual
pointers&lt;/strong&gt; you have in a tree to traverse between parents and
children. The reason is that we&amp;#39;re able to &lt;strong&gt;keep this binary tree as
balanced as possible, we don&amp;#39;t need pointers to figure out the parents
and children&lt;/strong&gt;. we can just read that off directly from the position in
the array.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Implementation:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The binary heap is that &lt;strong&gt;parent&amp;#39;s key no smaller than children&amp;#39;s key&lt;/strong&gt;, that&amp;#39;s (k is the index):
: -&lt;strong&gt;set a[k] to a[k/2] when we move up the tree&lt;/strong&gt;,
: -&lt;strong&gt;set a[k] to a[2*k] or a[2*k+1] when move down the tree&lt;/strong&gt;;&lt;/p&gt;

&lt;p&gt;We can take advantage of the capability to move up and down paths in
the tree without pointers and have guaranteed &lt;strong&gt;logarithmic performance&lt;/strong&gt;
because the height of a complete binary tree of size N is lgN.&lt;/p&gt;

&lt;p&gt;The basic algorithm swim (bottom-up reheapify) moves up the heap until we reach a node with a larger key, or the root; The function swim(int k)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//the parent of the node at position k in a heap is at position k/2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//the node&amp;#39;s key larger than parent&amp;#39;s key&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;//exchange the node with its parent&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The sink algorithm movs down the heap until we reach a node with both children smaller(or equal,) or the bottom; The function sink(int k)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//the children of the node at position k in a heap are at positions 2k and 2k+1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;                    &lt;span class=&quot;c1&quot;&gt;//the children of the node&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//find the smaller children&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;//swap the node with the smaller children&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The insert algorithm requires no more than 1 + lgN compares, which involving &lt;strong&gt;moving along a path between the root and the bottom of the heap&lt;/strong&gt; whose number of links is no more than lgN; the function insert(key x)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;swim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//swim up through the heap&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The heap algorithms require no more than 2lgN compares for remove the maximum; The operation involves moving the heap path no more than lgN, and it requires two compares for each node on the path (except at the bottom): one to find the child with larger key, the other to decide whether that child needs to be promoted; The function delMax()&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//the largest key off the top&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//exchange the last one with root&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//sink sown through the heap&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//to avoid loitering and help with garbage collection&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Performance Analysis:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For typical applications that &lt;strong&gt;require a large number of intermixed insert and remove the maximum/min operations&lt;/strong&gt; in a large priority queue, the elementary implementations using an ordered array or an unordered array require linear time for one of the operations, a heap-based implementation provides a guarantee that both operations complete in &lt;strong&gt;logarithmic time&lt;/strong&gt;.&lt;/p&gt;
</content>
	</entry>
    
	<entry>
		<title>Some Learning about Economics</title>
        <link href="/economics/2014/04/09/some-learning-about-economics.html" />
        <id>/economics/2014/04/09/some-learning-about-economics.html</id>
		<updated>2014-04-09T12:09:00+08:00</updated>
		<content type="html">&lt;p&gt;总结自&lt;a href=&quot;http://www.oklink.net/a/0011/1101/mgzy/003.htm&quot;&gt;产权与交易费用&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于经济规律&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在任何经济制度下,决定一个人生活的境况,富贵贫践的因素,始终脱离不了&lt;strong&gt;适者生存,不适者淘汰&lt;/strong&gt;的原则; 以竞争定成败,分富贵,必定有一个或多个衡量的准则或规格来决定胜负,或分出&amp;quot;适者&amp;quot;与&amp;quot;不适者&amp;quot;; 在成千上万的横量准则中,只有以 &lt;strong&gt;市场价值&lt;/strong&gt; 作衡量成败，支配资源的准则，是没有浪费。既然唯一没有经济浪费的竞争准则是市场价值，这种 &lt;strong&gt;准则只有在私有产权下才可以有效运用（why？ 因为没有私产就没有自由市场,也没有真正的市价）&lt;/strong&gt;。私有产权制度就是资本主义的骨干；倘若取消私有产权，或在私产界定不健全的情形下，其他种种形式的竞争衡量准则会纷纷出现；适者生存，不适者淘汰的原则是没有改变，但换了衡量的准则，偏会引起各种浪费现象.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于民主与市场&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;投票本身能否正确地表达民意呢? 阿罗的&amp;quot;难能定律&amp;quot;的一个的主要结论是&lt;strong&gt;社会是未必一定能够将市民的意向以优劣排列出来&lt;/strong&gt;; 其中有关民主投票较重要的一个结论是布拉克所演变出来的- &lt;strong&gt;多数取决并不一定能正确地反映民意&lt;/strong&gt;; (假若投票权能在自由市场公开买卖,只要交易费用不过高,投票必能正确地反映民意: 每个社会决定,市民所受的利害不同,而以投票方式,多数取决,受益者的总利可能远较受害者的总负值为低; 若后者可以补偿前者的话,害大于利的决策就不会实行,大家都可得益),因而以市价作胜负衡量是比任何其他投票方式可靠很多,我们也可因而以&lt;strong&gt;市场为最民主的地方&lt;/strong&gt;; 民主投票的最大缺点是 票数即不能反映代价,亦不能刺激生产(见上述分析); &lt;strong&gt;投票可以导致财富分配有所转变&lt;/strong&gt;; 但要改变分配,投票方式是下策.无论用甚么方法,改变财富分配与保障民权是有冲突的.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;投票取舍的主要缺点,是票数既不能反映代价,亦不能刺激生产&lt;/strong&gt;(社会是未必一定能够将市民的意向以优劣排列出来), 因此&lt;strong&gt;投票不是表达民意的可靠方法&lt;/strong&gt;; &lt;strong&gt;投票会引起财富分配的转变,故投票可成为减少民权保障的工具&lt;/strong&gt;(因为市场是以钞票投票定胜负,人数多少并没有一定的决定性,而获胜者也并不一定是富有的人); 要改变财富的分配,可用较直接及有固定性的办法.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;民主与交易费用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;政府是什么或什么活动政府可以比市场办事较有效率,经济学仍未有肯定的答案.高斯(R.H.Coase)于1937年所发表的公司原理所推演出来的政府理论提供了一个解说;高斯认为在市场交易往往有颇高昂的费用(比如定价的费用是交易费用的一大项,包括量度费用,讯息费用,讨价还价及保障承诺的各种费用),&lt;strong&gt;在某些情况下市价是难以决定的&lt;/strong&gt;;因而资源的运用往往是不能靠市价的指引.因为&lt;strong&gt;交易费用大而难定市价,公司便会代替市场&lt;/strong&gt;;在公司里,经理指导资源的运用,免却了很多种市价的决定. &lt;strong&gt;公司的形成就是因为要节省交易费用的缘故&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;市场要先定市价,所以它的交易费用是最高的;独裁作决策的交易费用最低,但独裁者可以滥用权力. 民主投票最大的经济收益,是在决策上能节省定价的交易费用;但投票作决策的准确性不及市场.&lt;/p&gt;
</content>
	</entry>
    
	<entry>
		<title>Math is the Basis of Science</title>
        <link href="/reading/2014/04/04/math-is-the-basis-of-science.html" />
        <id>/reading/2014/04/04/math-is-the-basis-of-science.html</id>
		<updated>2014-04-04T11:02:00+08:00</updated>
		<content type="html">&lt;p&gt;摘录自&lt;a href=&quot;http://book.douban.com/subject/1118984/&quot;&gt;給討厭數學的人&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;古以色列人的宗教的&lt;strong&gt;基本教义就是与唯一绝对的人格神所订的契约&lt;/strong&gt;，神会不时地判断他们有没有背弃这个契约。如果没有坚守这个契约，他们就会被全部消灭。这促使以色列人不得不心惊胆战地把思考推往逻辑的方向。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以色列宗教的秘密就在神和先知的争论。&lt;strong&gt;神对先知的命令是绝对的，但是命令的正确内容要藉由争论来明辨&lt;/strong&gt;。所以以色列宗教蕴含着无限的发展可能性，成为孕育出逻辑学的主轴，促使逻辑学和数学结合。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;产生前后一贯的逻辑体系，并与之结合，这就是为什么数学能够成为科学的龙头&lt;/strong&gt; 。中国的数学与实用性密切相关。像希腊的欧式几何学显性的 &lt;strong&gt;论证性&lt;/strong&gt;，是中国数学所缺乏的。既然缺乏论证性，就不可能有前后一贯的逻辑体系。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;这个逻辑体系要作为人的伦理，也就是人的世界观，人生观的中枢，还必须在宗教上取得合理性，去除不合理的地方。也就是说，&lt;strong&gt;逻辑必须随着宗教的合理化前进。逻辑必须摆脱魔术，巫术，礼仪的纠缠，才能单纯地运作&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存不存在是个大问题。有些问题是无解的，重点就在这里。是否以“解”（存在）为目的是个问题。 &lt;strong&gt;“问题有没有答案” 正是人类所面临的最大问题&lt;/strong&gt;，以神学来说，神学最大的问题点是“神是否真的存在”。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;古代中国社会虽然喜好逻辑辩论，却没有综合归结出形式逻辑学最终的理论法则。也就是一个命题是否成立（是否真假），不仅是由说者和听者之间的情谊来决定，也要看说者是否能看穿听者的心。而形式逻辑学的精髓却是，决定一个命题是否成立完全与说者和听者的能力和关系毫无关系。古以色列的一神教，绝对的神和人缔结契约这个感念不能缺乏高度精密的逻辑学。遵守这个契约是救赎的条件。争论的对象是最高且绝对的神，就是这种拿生命做赌注，无比激烈的争论，才能使逻辑学的发展达到极限。古代中国是人与人之间的辩论，成败依赖于说服的技巧。所以其逻辑主要是揣摩或臆测，推想对方的心情而已。当逻辑的极致是在揣摩和忖度，只是要以对方容易接受的方式陈述其内心的需求时，就不会去讲究话里面所涵喻的道理在客观上是否正确。这就是中国的逻辑学没有升华为形式逻辑学，中国的数学逻辑无法重整的原因。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;近代数学的逻辑是形式逻辑学，而形式逻辑学是古希腊的亚里士多德完成的。不过，使逻辑汇整为完美无缺的形式逻辑学，则是古代以色列人的神。古以色列人的神是绝对唯一的人格神，这个宗教的基本教义就是神与人的契约。契约是绝对的，所以 &lt;strong&gt;神要求人绝对且正确地遵守契约。契约不是“成立”就是“不成立”，没x有模棱两可的空间，就诞生了“矛盾律”&lt;/strong&gt;。矛盾律确定之后”，还有 &lt;strong&gt;契约就是契约，不是契约以外的东西，，就指向了“排中律&lt;/strong&gt; 。形式逻辑学是依照这三个原则所产生的，进而成为数学的源头。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;矛盾律指两个命题不会都为真，也不会都为假；一定是一个为真，另一个为假&lt;/strong&gt;。&lt;strong&gt;排中律指两个命题之外是不存在的。有时候两命题不可能皆为真，却有可能皆假，这样的命题为“相反”&lt;/strong&gt;。数学绝不允许矛盾，这个禁止矛盾的大原则给予数学气势如虹的生产力，也让数学产生了归谬法这个威力十足的研究方法。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全称命题的否定就是特称命题。用特称命题来否定全称命题，或是用全称命题来否定特称命题，就是逻辑的规则。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“空”的思想否定了数学的思考。“空”的思想就是否定了形式逻辑学。“空”即不有也不是无，但同时即是有也是无，也是有与无之外的一切。所以是位于超越和统合有与无的地方。对于”神存在吗？“ 这个问题，依形式逻辑学，答案不是”有”就是“没有”，没有其他。可是不在乎形式逻辑学的佛教徒并不这么认为，佛教徒可能回答“佛存在”，“佛不存在”，“佛既存在也不存在”，“佛既非存在也非不存在”。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;近代资本主义的根基是“私人所有权”&lt;/strong&gt;。 私人所有权就是对个人所有物具有全面且绝对的支配，所有者可以任意处置所有物； ** 所有权的绝对性来源于基督教 ** 。在基督教中，&lt;strong&gt;神（造物主）对受造之物的所有权是绝对的&lt;/strong&gt;。正因为有资本主义的“所有权”的概念，近代资本主义才会萌芽，成长而壮大。能够在现实中支配，就是自己的东西，即支配即是所有，没有资本主义的所有权的概念，就会做出这种行为。近代资本主义是以商品交换为前提，经济的主题要求目的的合理性的行动。没有全面且绝对的所有权，商品的买卖就不可能顺利。 抽象性是资本主义所有权的另一特征，也是 &lt;strong&gt;从商品交换产生的&lt;/strong&gt;。所有权的抽象性是指 &lt;strong&gt;所有权的成立与现在是否支配此物并无关联&lt;/strong&gt;。正因为是  &lt;strong&gt;抽象性，资本主义社会中的所有权才能够轻易地验证出同一律，矛盾律，排中律，并以数学的方式处理&lt;/strong&gt; 。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在近代资本主义中，所有权是绝对的，不为人际关系和社会情势所左右，也不容许中庸或因故变更。否则，经济主体就无法依照目的合理性去行动，市场自由也不会发挥功能。当交情比法律和规范还优先时，绝对的资本主义所有权如何成立？ 消费者和企业也就无法随心所欲地活动，资本主义也就变得千疮百孔。也就是家产官僚制一直无法转变成法律官僚制，而导致社会主义性的扭曲。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以矛盾律为基础的归谬法，促成了在所有科学的领域中，研究的态度也同样从真理的发现变为模型的建构。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;归纳法。人的经验即是特称经验的范畴。由特称命题借归纳法得出全称命题的结论未必正确。但是&lt;strong&gt;科学就是借着把“可能正确”替换成“正确”的归纳法而蓬勃发展的&lt;/strong&gt;。要从特称命题建构出科学的真理（全称命题）是不可能的。有可能是科学真理的命题顶多也只能得到很像科学真理的命题。归纳法无法导出正确的规律，只能导出可能正确的规律。物理，化学实验等自然科学实验中使用的归纳法称为“不完全归纳法”。因为  &lt;strong&gt;该实验只能证明有可能成立。也就是自然科学的实验是不完全归纳法 *&lt;em&gt;。完整的归纳法是数学独有的，其它的归纳法未必，只能证明命题“可能是正确的，有正确的可能性”。当 *&lt;/em&gt;归纳法当作一种说服的技术时，藏有种种陷阱&lt;/strong&gt;。比如 &lt;strong&gt;列举，这时候，样本的大小和样本是否足以代表总体是非常重要的&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;等价就是指两者的逻辑完全相同，也就是充要条件。必要条件是指A成立B也一定成立，B就是A的必要条件。也就是如果B命题不成立，A命题也一定不成立。充分条件是指A成立，B也一定成立，A是B的充分条件。也就是A包含在B的集合里。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方程式是在“唯有在特定数值时成立”，可以算出解答。恒等式永远是相等的，所以求出数值没有意义的。是用来证明确实是相等的。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
    
	<entry>
		<title>一些好的摘录</title>
        <link href="/summary/2014/03/30/some-good-learning.html" />
        <id>/summary/2014/03/30/some-good-learning.html</id>
		<updated>2014-03-30T22:14:00+08:00</updated>
		<content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在拥有足够智商的前提下,人与人之间的差距更多取决于&lt;strong&gt;随时独力思考的习惯,勤勉的学习工作态度,坚韧不拔克服困难的能力&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;果敢干练和远见卓识的能力, 不带自负色彩的果断&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;与朋友交谈了解没有被过滤的真实&lt;/strong&gt;; &lt;strong&gt;与陌生人交流进入对方的语境&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;感觉每一次变化,都会&lt;strong&gt;比前一个阶段承担更多的责任&lt;/strong&gt;,在这样一种渐近的过程中,你会越来越有一种信念: 我们要始终拿出&amp;#39;最好的自己&amp;#39;来面对我们的工作,相信一切皆有可能,并通过行动将一切变成可能&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;尽你所能和最优秀的人合作, 向这个行业里最优秀的人看齐,并以他们为目标&lt;/strong&gt;,
作为自己修炼成长的榜样 -- 知识结构
&lt;strong&gt;找一位大人物做你的导师: 确定共同目标&lt;/strong&gt; - &lt;strong&gt;还要与他商讨联系的频率以及何种方式交流; 尽可能地尊重他做的每一件事&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不断学习: &lt;strong&gt;专业能力明显进步了吗? 无论理论或实践,自己有独特的见解吗?
能否独立搞定? 能否独挡一面?&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;职业化: &lt;strong&gt;在其位谋其职,用自己最大的努力去做&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做人:&lt;strong&gt;与上司,与同事,人际关系处理能力&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尝试做一些&lt;strong&gt;新的事情&lt;/strong&gt;, 同一时间要去&lt;strong&gt;想一个新的问题或者有一种和其他人不同的新方法&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;被美丽指引&lt;/strong&gt;;把事情做正确是一件很美的事&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;盘点自己&lt;strong&gt;承担和规避风险的摹式&lt;/strong&gt;,仔细考察身上&lt;strong&gt;令自己感到自信的特质及失败时让自己重整旗鼓的能力&lt;/strong&gt;
了解承担风险的时机和方式, 时间,金钱,感情,创意风险,要有适度的风险,寻找额外的舒适区&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有一份还行的 &lt;strong&gt;手艺, 吃苦耐劳, 肯学习, 肯冒险&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;才能:了解自己的优势,更要了解自己的弱点; &lt;strong&gt;不断学习,搜集信息,寻找导师,实践,阅读, 评估个人和职业的不足之处&lt;/strong&gt;,并且在处于劣势时无所畏惧地弥补;
即便已经赛满新的信息和技能,仍有富余空间反省和学习
一个人的才华与学识,是可以通过努力必然获得的东西; &lt;strong&gt;至少一个领域的专家,有耐心和时间做朋友&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;正确认识&lt;strong&gt;自己的盲点,自己身上没有正确认识的东西&lt;/strong&gt;;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;有时候过于同情穷人&lt;/li&gt;
&lt;li&gt;被动,没有主动去结交对自己有帮助的,富有的人,有时候要势利下&lt;/li&gt;
&lt;li&gt;商业意识&lt;/li&gt;
&lt;li&gt;很容易被胡搅蛮缠,推托责任的人触怒&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以发现&lt;strong&gt;自己新的一面: 认识那些触动我的人和事,让我生气,感觉怪异或深受感动的&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受触动:很努力的人,很负责的人,很有气质的人&lt;/li&gt;
&lt;li&gt;生气: 仗势欺人,两面三刀&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手艺需要增进,人际交往能力, 沟通能力&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;责任感和领导能力: 让他们迅速掌握各种技能,&lt;strong&gt;能够领导团队,激励他人,经营自己的人际关系网络&lt;/strong&gt;; 已经习惯于来自世界各地的学生,&lt;strong&gt;从王室子弟到平民阶层,打成一片; 跨文化交流能力&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;让自己逐渐习惯于参加各种严酷的竟争,竟争是世界级的&lt;/strong&gt;;如果有能力参加这种高难度的竟争,可以建立自尊心和自信的的催化剂 &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;保持专注: 尽量减少在工作和家庭中的承诺,&lt;strong&gt;学着建立一种基于目标和个人价值体系的优先级系统,尽量严受&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;when you don&amp;#39;t create things, you become defined by your tastes
rather than ability, &lt;strong&gt;your tastes only narrow &amp;amp; exclude people, so create&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;每天一大早挑出最重要的三件事,当天一定要能够做完; 最好有一件事重要但不急的&lt;/strong&gt;; 有些急但不重要的事,要学会放掉,能对人说 no&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;与求安全感不同,英国人 是因为&lt;strong&gt;财富能够得到尊重和保护,财富可以让他们过上舒适安宁的生活,可以全面发展自己&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对什么都不要想当然; &lt;strong&gt;每天进步一点点&lt;/strong&gt;;  &lt;strong&gt;应该与自己排斥的人一起工作&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;要成功进行职业策划,就必须&lt;strong&gt;把握最核心的事物,做最有效能,最有价值的职业积累*; *做有价值而不重复的工作经历&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;证实倾向,&lt;strong&gt;做出决策并贯彻执行前进行一些小试验,以检验自己的想法是否正确&lt;/strong&gt;,以确保我们的决策是建立在事实而非偏见的基础上
使决策过程客观化,通过&lt;strong&gt;不断采纳他人建议来调整我们看问题的视角,丰富我们选择空间&lt;/strong&gt;,并且从当事另一方的角度看问题; 我们需要&lt;strong&gt;探寻自己信息偏倚和心理偏见的根源&lt;/strong&gt;; 我们还必须&lt;strong&gt;不断思考一个决策是否能被重构以实现我们的目标&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;认真交朋友&lt;/strong&gt;: 一个真正富有成效的关系网是友情的副产品;&lt;strong&gt;友谊是第一步,要对朋友的工作保持好奇心,并且和朋友多聊自己的工作&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;永远提早赴约&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;你&lt;strong&gt;在幕后计划慈善晚宴,组织,为无声拍卖收集拍品的努力&lt;/strong&gt;,不但可以得到食物链上层人士的注意,还可以得到下层人士的感激&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在专业评台上发表讲话; 努力成为一名思想领袖&lt;/strong&gt;,在对企业或行业具有重要意义的话题上有所建树&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;打理好关系网&lt;/strong&gt;: &lt;strong&gt;相互转发&lt;/strong&gt;之前讨论过的话题相关的有趣文章;&lt;strong&gt;相互引见,尽量参加对方组织的活动&lt;/strong&gt;; 一种&lt;strong&gt;职场友谊,如果我们发现有可以帮助对方的有意义的机会,我们都会挺身而出&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用现有的人际关系网: 避免急功近利,没有诚意的举动不会让你受欢迎;要做的就是 &lt;strong&gt;微笑,友善些,握手和提问&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;全方位锻造自己各方面的职业技能&lt;/strong&gt;; &lt;strong&gt;多跟职业黄金期的朋友交流&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人到中年,要注意&lt;strong&gt;沉淀朋友,培养爱好,学会承受,勤于读书&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做技术,就要做精做深,成为这个行业的技术专家; 找机会再到大公司去镀金,学高深的技术&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;积极争取学习和进步的机会&lt;/strong&gt;;  做技术,多锻炼,多学习来提高自己的水平;  争取自己的机会&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;积累个人的信誉,&lt;strong&gt;诚信&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;注意利用资源,比如有钱的亲戚,成功的长辈或朋友&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;人脉的积累&lt;/strong&gt;,注意认识在这个行业的人,结交他们; &lt;strong&gt;多听听成功的前辈和成功的朋友的意见&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;只要彼此非常职业的相处,这不是什么问题&lt;/strong&gt;, 该董事会主席帮助她轻松地入职; 安排了一个私人午餐,以相互了解; 在董事会会议上&lt;strong&gt;言语不多&lt;/strong&gt;,而是&lt;strong&gt;倾向于董事会成员畅所欲言&lt;/strong&gt;, &lt;strong&gt;仔细倾听,总结讨论的要点,提取共同点并提出董事会决议&lt;/strong&gt;; 向每一个董事会成员打私人电话, &lt;strong&gt;介绍她自己并了解他们的关注点&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;决议要获得每个人的同意需要&lt;strong&gt;时间,耐心和一些创造力&lt;/strong&gt;; 要想让他人同意你想要的东西,你需要&lt;strong&gt;想办法解决他们的问题&lt;/strong&gt;;如果有问题需要你帮助解决的话,你需要&lt;strong&gt;了解另一方来自何处,为什么他需要解决这个问题&lt;/strong&gt;. 有时,你也无能为力,但&lt;strong&gt;至少你可以表明自己已经非常尽力了&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要坚受核心价值和原则; 这样才能&lt;strong&gt;建立信用和信任&lt;/strong&gt;; 而&lt;strong&gt;信任是有意成为领导者的基础&lt;/strong&gt;; &lt;strong&gt;乐意接受新挑战&lt;/strong&gt;,比如 她加入calPERS董事会时,她说她在投资方面没有太多经验; 当她加入中国银行董事会时,她说她对中国或香港的银行体系不熟悉;&lt;strong&gt;做这些是为了成长&lt;/strong&gt;; 如果你做的是自己熟悉的事情并且做好了,就真的不值得再做了; &lt;strong&gt;要经常抓住真正能够成长的机会&lt;/strong&gt;, &lt;strong&gt;需要学习更多才能做好的机会&lt;/strong&gt;;因为这样你才可以&lt;strong&gt;拓宽自己的眼界&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;花在学习上的精力,&lt;strong&gt;锻炼自身技艺的认真态度,以及真正学到的东西&lt;/strong&gt;
学历对你成就的影响,远远比不上其他许多东西: &lt;strong&gt;选择伴侣的智慧,与所居住的社区之间的互动,对组建的家庭的慷慨&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大学应该让你改变而不是延续过往: 你应该&lt;strong&gt;翻开新的一页,成为崭新的自己&lt;/strong&gt;,
而不是让一切在十七八岁的你身上定型&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个人不断进步的结果是&lt;strong&gt;会遇到越来越精彩和优秀的人&lt;/strong&gt;,不一定是指地位上金钱上的,而是你知道他真的很优秀,从外在到内心; &lt;strong&gt;就因为你变得优秀,你会遇到更优秀的人&lt;/strong&gt;; &lt;strong&gt;为遇到这些更优秀的人而进步吧,不要停止&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的说法都很具体并且来自于切身的经历; &lt;strong&gt;尊重那些踏实的人,多做事,把小事做好&lt;/strong&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一个人,都是我的老师;养成一种&lt;strong&gt;随时随地随人随事学习&lt;/strong&gt;的习惯:用心观察生活,在旅行中考察风土人情,&lt;strong&gt;思考为什么并且找寻答案&lt;/strong&gt;,询问各种职业的人关于他们的工作&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don&amp;#39;t do lousy jobs&lt;/strong&gt;. 随着年龄的增长，我们犯错误的成本越来越高；&lt;strong&gt;如果是因为怠慢而犯错以至丧失机会，那代价就太大了&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;真正适合我的环境和圈子，应该是能够让我&lt;strong&gt;展现真实的自我&lt;/strong&gt;的地方&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;don&amp;#39;t judge too soon&lt;/strong&gt; .  先入为主很容易误判； 对人对事，在收集到足够证据之前，&lt;strong&gt;不好轻易下定论&lt;/strong&gt;，言辞上留有余地，心理上抱有一定程度的观望，爱恨不在一瞬间，真伪良莠需要时间来证明&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;职场&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;人才都要经得起折腾，&lt;strong&gt;负责到底的人创造性解决难题的人&lt;/strong&gt;是最有机会成为职场黑马的&lt;/li&gt;
&lt;li&gt;职场人如果所做的工作没有吃力感，较轻松，是一个比较危险的状态，意味着随时你的工作会被更低工资的人替代；&lt;strong&gt;给自己一点压力，你才会进步&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有能力还全心全意还团结协作的人就是黑马了；&lt;strong&gt;三心二意的投入和全心全意的投入其实费的时间一样，但工作结果完全不一样&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;一部分员工做事会反思有悟性并且会想出一些小办法提高效率，还有极少员工会&lt;strong&gt;归纳会思考&lt;/strong&gt;，会将&lt;strong&gt;工作流程进行极大的改进&lt;/strong&gt;并&lt;strong&gt;找到一件事情的关键点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我们社会认为富就是错,原罪;这是不对的,&lt;strong&gt;富人没错,富本身并不错的&lt;/strong&gt;;过去叫&lt;strong&gt;剥削,但这个理论是错的&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;中国传统是同情穷人,而不分对错 &lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
    
</feed>

            </div>
        </div>
        <script type="text/javascript">
  var _gauges = _gauges || [];
  (function() {
    var t   = document.createElement('script');
    t.type  = 'text/javascript';
    t.async = true;
    t.id    = 'gauges-tracker';
    t.setAttribute('data-site-id', '4e511776613f5d3738000002');
    t.src = '//secure.gaug.es/track.js';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(t, s);
  })();
</script>

    </body>
</html>
