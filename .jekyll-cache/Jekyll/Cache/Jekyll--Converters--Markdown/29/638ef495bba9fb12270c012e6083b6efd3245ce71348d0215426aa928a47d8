I"m
<h4 id="ch7-before-the-project">ch7 Before the project</h4>
<ul>
  <li>digging for requirements
    <ul>
      <li>
        <p>make the requirement <strong>the general statement</strong> , and give the developers the policy information as an example</p>
      </li>
      <li>discover the <strong>underlying reason why</strong> users do a particular, rather than just the way
        <ul>
          <li><strong>documenting the reasons</strong> behind requirements</li>
          <li>your dev has to <strong>solve the business problem</strong>, not just meet the stated requirements</li>
        </ul>
      </li>
      <li>
        <p>propose the <strong>concept of use cases</strong> as a basis for discussions - the developers, the end users, and project sponsors</p>
      </li>
      <li>requirements are need
        <ul>
          <li>
            <p>accurately reflects the business need</p>
          </li>
          <li>
            <p><strong>capture the underlying semantic invariants as requirements</strong>, and document the <strong>specific as policy</strong></p>
          </li>
          <li>
            <p><strong>abastractions live longer than details</strong></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="the-pragmatic-approach">The Pragmatic Approach</h4>
<ul>
  <li>The evails of duplication adn othrogonality</li>
</ul>

<h4 id="the-basic-tools----tools-amplify-your-talent">The basic tools  - <strong>tools</strong> amplify your talent</h4>
<ul>
  <li>
    <p>Invest in your own basic toolbox</p>
  </li>
  <li>
    <p>Plain Text is that standard
  Our base material is <strong>knowledge</strong>. We express that knowledge in our designs, implementations, test, and documents. The best format for storing knowledge persistently is <strong>plain text</strong>.</p>
  </li>
  <li>
    <p>Power editing 
  Using one Editor could manipulate text as effortlessly as possible. we should know it very well, and use it for <strong>all editing tasks</strong>.</p>
  </li>
  <li>
    <p>Debugging - <strong>fix the problem</strong>, not the blame</p>
    <ul>
      <li>debugging is <strong>just problem solving</strong>, and attack it as such</li>
      <li>visualize the data -&gt; get a good look at the data it is operating on</li>
      <li>Tracing -&gt; the state of a program or a data structure over time</li>
      <li>Donâ€™t assume it, <strong>prove it</strong>; and how to improve it</li>
      <li>master one text manipulation language</li>
    </ul>
  </li>
</ul>

<h4 id="todo">TODO</h4>

<h4 id="reference">reference</h4>
<ul>
  <li>The Pragmatic Programmer by Andrew Hunt &amp; David Thomas</li>
</ul>
:ET