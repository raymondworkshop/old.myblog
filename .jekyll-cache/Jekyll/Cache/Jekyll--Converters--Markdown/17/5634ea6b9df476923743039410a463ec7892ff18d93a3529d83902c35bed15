I"K<h3 id="notes-on-construction-of-software-system-at-scale">Notes on construction of software system at scale</h3>
<ul>
  <li>
    <p>Software engineering creates <strong>practical, cost-effective solutions</strong> to develop software systems in the service of mankind.</p>
  </li>
  <li>
    <p>Software Engineeers are less likely to design data structures and algorithms from scratch and <strong>more likely to build systems from library and framework components</strong>.</p>
  </li>
  <li></li>
</ul>

<h4 id="lessons">lessons</h4>
<ul>
  <li>building on one anotherâ€™s successes</li>
</ul>

<h4 id="concepts-of-design-for-complex-systems---from-programs-to-systems">Concepts of design for complex systems - From programs to systems</h4>
<ul>
  <li>algorithms &amp; Data structures -&gt; reuse of libraries, frameworks</li>
  <li>Functions with inputs and outpurs -&gt; Asynchronous and reactive designs</li>
  <li>sequential and local computation -&gt; Parallel and distributed computation</li>
  <li>Full functional specifications -&gt; partial, composable, targeted models</li>
</ul>

<h4 id="software-engineering">Software engineering</h4>
<ul>
  <li><strong>Costs and time constraints matter, not just capability</strong></li>
</ul>

<h4 id="software-degisn---good-design-follows-a-process">Software degisn - good design follows a process</h4>
<ul>
  <li><strong>Interface-based design</strong> - API  defines expectations for clients
    <ul>
      <li>Contracts - agreement between provider and users
        <ul>
          <li><strong>Interface specifies expectations</strong>
            <ul>
              <li>design for <strong>change and reuse</strong></li>
              <li>functionality, correctness, performance expectations</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>Information hiding</strong> -&gt; modularity
        <ul>
          <li>spearates <strong>API</strong> from implementation</li>
        </ul>
      </li>
      <li>objects <strong>provide diff implementations</strong> for the same specification</li>
      <li>client <strong>only cares about interface</strong>, not about the implementation</li>
      <li></li>
      <li>doc
        <ul>
          <li><strong>what the method does</strong>, no not doc implementation details</li>
          <li></li>
        </ul>
      </li>
      <li><strong>test-driven</strong> development
        <ul>
          <li>write tests before you write the code</li>
          <li>write <strong>test based on the specification</strong></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>design (sub)systems
    <ul>
      <li>design for robustness and change</li>
    </ul>
  </li>
  <li>
    <p>design for large-scale reuse</p>
  </li>
  <li>think before coding</li>
</ul>

<h4 id="java">Java</h4>
<ul>
  <li>Static Analysis
    <ul>
      <li>Compiler ensures <strong>types</strong> are correct</li>
    </ul>
  </li>
  <li>Proofs (Formal verification)
    <ul>
      <li><strong>mathematically prove code</strong> matches its specification</li>
    </ul>
  </li>
  <li>Testing</li>
  <li></li>
  <li>Write tests based on the <strong>specification</strong><br />
    - Think about testing when writing code</li>
</ul>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Test-driven development -&gt; Writing tests before you write the code 
</code></pre></div></div>

<h4 id="concurrent-and-distributed-software">concurrent and distributed software</h4>

<h4 id="reference">reference</h4>
<ul>
  <li><a href="http://www.aosabook.org/en/index.html">The Architecture of Open Source Applications</a></li>
</ul>

:ET